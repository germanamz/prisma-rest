datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

generator hono {
  provider   = "prisma-hono"
  output     = "./generated/hono"
  clientPath = "./generated/client"
}

// generator crud {
//   provider   = "prisma-crud-services"
//   output     = "./generated/services"
//   clientPath = "./generated/client"
// }
//
// generator zod {
//   provider = "prisma-zod"
//   output   = "./generated/zod"
// }

enum LedgerType {
  MAIN
  CC
}

/// @crud.actions read, create, update, delete
model Ledger {
  id        String     @id @default(uuid())
  name      String
  type      LedgerType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  entries   Entry[]
}

enum PayloadKind {
  SMART
  IMPULSE
}

// TODO: Add support for custom types
// type DeeperPayload {
//   name        String
//   description String?
//   kind        PayloadKind?
//   payload     EntryPayload?
// }
//
// type EntryPayload {
//   name        String
//   description String?
//   deeper      DeeperPayload?
//   kind        PayloadKind?
//   raw         Json?
// }

enum BookNamespace {
  BU1
  BU2
}

model Book {
  id          String        @id @default(uuid())
  namespace   BookNamespace
  section     String
  label       String
  root        Boolean?
  description String?
  Entry       Entry[]

  @@unique([namespace, section])
  @@unique([section, label])
}

model Entry {
  id        String        @id @default(uuid())
  amount    Float
  createdAt DateTime      @default(now())
  deletedAt DateTime?
  namespace BookNamespace
  section   String
  book      Book          @relation(fields: [namespace, section], references: [namespace, section])
  ledgerId  String
  ledger    Ledger        @relation(fields: [ledgerId], references: [id])
  logs      Log[]
}

model Log {
  section    String
  subSection String
  msg1       String? @default("msg1")
  msg2       String  @default("msg2")
  entry      Entry   @relation(fields: [entryId], references: [id])
  entryId    String

  @@unique([section, subSection])
}

model Label {
  name  String @unique
  group String @unique
}
